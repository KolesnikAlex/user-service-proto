// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcUserServiceClient is the client API for GrpcUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcUserServiceClient interface {
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Request, error)
	RemoveUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Request, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Request, error)
}

type grpcUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcUserServiceClient(cc grpc.ClientConnInterface) GrpcUserServiceClient {
	return &grpcUserServiceClient{cc}
}

func (c *grpcUserServiceClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpc.GrpcUserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcUserServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/grpc.GrpcUserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcUserServiceClient) RemoveUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/grpc.GrpcUserService/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcUserServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Request, error) {
	out := new(Request)
	err := c.cc.Invoke(ctx, "/grpc.GrpcUserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcUserServiceServer is the server API for GrpcUserService service.
// All implementations must embed UnimplementedGrpcUserServiceServer
// for forward compatibility
type GrpcUserServiceServer interface {
	GetUser(context.Context, *Id) (*User, error)
	AddUser(context.Context, *User) (*Request, error)
	RemoveUser(context.Context, *Id) (*Request, error)
	UpdateUser(context.Context, *User) (*Request, error)
//	mustEmbedUnimplementedGrpcUserServiceServer()
}

// UnimplementedGrpcUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcUserServiceServer struct {
}

func (UnimplementedGrpcUserServiceServer) GetUser(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGrpcUserServiceServer) AddUser(context.Context, *User) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedGrpcUserServiceServer) RemoveUser(context.Context, *Id) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedGrpcUserServiceServer) UpdateUser(context.Context, *User) (*Request, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGrpcUserServiceServer) mustEmbedUnimplementedGrpcUserServiceServer() {}

// UnsafeGrpcUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcUserServiceServer will
// result in compilation errors.
type UnsafeGrpcUserServiceServer interface {
	mustEmbedUnimplementedGrpcUserServiceServer()
}

func RegisterGrpcUserServiceServer(s grpc.ServiceRegistrar, srv GrpcUserServiceServer) {
	s.RegisterService(&GrpcUserService_ServiceDesc, srv)
}

func _GrpcUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GrpcUserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcUserServiceServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcUserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcUserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GrpcUserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcUserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcUserService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcUserServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GrpcUserService/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcUserServiceServer).RemoveUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcUserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcUserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GrpcUserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcUserServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcUserService_ServiceDesc is the grpc.ServiceDesc for GrpcUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GrpcUserService",
	HandlerType: (*GrpcUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _GrpcUserService_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _GrpcUserService_AddUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _GrpcUserService_RemoveUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _GrpcUserService_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_user_service.proto",
}
